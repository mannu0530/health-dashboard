version: '3.8'

services:
  # PostgreSQL Database - lightweight configuration
  postgres:
    image: postgres:15-alpine
    container_name: health-dashboard-postgres-light
    environment:
      POSTGRES_DB: health_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      # Memory optimization settings
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 32MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - health-dashboard-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Redis Cache - minimal configuration
  redis:
    image: redis:7-alpine
    container_name: health-dashboard-redis-light
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru --save "" --appendonly no
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - health-dashboard-network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'
        reservations:
          memory: 32M
          cpus: '0.1'

  # Backend API - lightweight build
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: health-dashboard-backend-light
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/health_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 15s
      retries: 3
    networks:
      - health-dashboard-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.75'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Frontend Application - ultra lightweight
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.lightweight
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: health-dashboard-frontend-light
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - NODE_ENV=production
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 60s
      timeout: 10s
      retries: 2
    networks:
      - health-dashboard-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  # Prometheus Monitoring - minimal configuration
  prometheus:
    image: prom/prometheus:latest
    container_name: health-dashboard-prometheus-light
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.no-lockfile'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - health-dashboard-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  # Grafana Dashboard - lightweight
  grafana:
    image: grafana/grafana:latest
    container_name: health-dashboard-grafana-light
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - health-dashboard-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  health-dashboard-network:
    driver: bridge
