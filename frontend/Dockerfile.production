# syntax=docker/dockerfile:1.4
# Build stage with optimized caching
FROM node:18-alpine AS deps

# Install dependencies for faster builds
RUN apk add --no-cache libc6-compat

# Set work directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies with clean cache and production optimization
RUN npm ci --only=production --silent \
    && npm cache clean --force

# Build stage with dependency caching
FROM node:18-alpine AS build

# Set work directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci --silent

# Copy source code
COPY . .

# Set environment variables for faster builds
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV CI=true
ENV DISABLE_ESLINT_PLUGIN=true

# Build the application with optimizations
RUN npm run build

# Production stage with minimal footprint
FROM nginx:alpine AS production

# Install only necessary packages
RUN apk add --no-cache --upgrade \
    && apk add --no-cache \
        curl \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Change ownership of the app directory
RUN chown -R nextjs:nodejs /usr/share/nginx/html

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 80

# Optimized health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
